using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace Batch.Worker
{
    public class WorkerActivator
    {
        private Dictionary<string, Func<WorkerBase>> WorkerActivators;


        public WorkerActivator()
        {

        }

        public WorkerBase CreateWorkerInstance(string WorkerClassNameWithNamespace)
        {
            if (WorkerClassNameWithNamespace == null)
                throw new ArgumentNullException("WorkerName");

            if (WorkerClassNameWithNamespace.Length == 0)
                throw new ArgumentException("WorkerName must not be zero length");

            if (!WorkerActivators.ContainsKey(WorkerClassNameWithNamespace))
            {
                Type type = TypeDelegator.GetType(WorkerClassNameWithNamespace);
                MethodInfo mi = type.GetMethod("Create");

                var createInstanceDelegate = (Func<WorkerBase>)Delegate.CreateDelegate(typeof(Func<WorkerBase>), mi);

                WorkerActivators.Add(WorkerClassNameWithNamespace, createInstanceDelegate);
            }

            return WorkerActivators[WorkerClassNameWithNamespace].Invoke();
        }

        public void PopulateActivators(List<string> WorkerClassNamesWithNamespaces)
        {

        }
        

    }
}
