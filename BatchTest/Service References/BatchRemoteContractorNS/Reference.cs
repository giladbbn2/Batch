//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BatchTest.BatchRemoteContractorNS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
    [System.SerializableAttribute()]
    public partial class FaultData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailedInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetailedInformation {
            get {
                return this.DetailedInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailedInformationField, value) != true)) {
                    this.DetailedInformationField = value;
                    this.RaisePropertyChanged("DetailedInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForemanStats", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
    [System.SerializableAttribute()]
    public partial class ForemanStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AppDomainMonitoringSurvivedMemorySizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AppDomainMonitoringSurvivedProcessMemorySizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AppDomainMonitoringTotalAllocatedMemorySizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan AppDomainMonitoringTotalProcessorTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ForemanIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkerNodeExceptionStringField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AppDomainMonitoringSurvivedMemorySize {
            get {
                return this.AppDomainMonitoringSurvivedMemorySizeField;
            }
            set {
                if ((this.AppDomainMonitoringSurvivedMemorySizeField.Equals(value) != true)) {
                    this.AppDomainMonitoringSurvivedMemorySizeField = value;
                    this.RaisePropertyChanged("AppDomainMonitoringSurvivedMemorySize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AppDomainMonitoringSurvivedProcessMemorySize {
            get {
                return this.AppDomainMonitoringSurvivedProcessMemorySizeField;
            }
            set {
                if ((this.AppDomainMonitoringSurvivedProcessMemorySizeField.Equals(value) != true)) {
                    this.AppDomainMonitoringSurvivedProcessMemorySizeField = value;
                    this.RaisePropertyChanged("AppDomainMonitoringSurvivedProcessMemorySize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AppDomainMonitoringTotalAllocatedMemorySize {
            get {
                return this.AppDomainMonitoringTotalAllocatedMemorySizeField;
            }
            set {
                if ((this.AppDomainMonitoringTotalAllocatedMemorySizeField.Equals(value) != true)) {
                    this.AppDomainMonitoringTotalAllocatedMemorySizeField = value;
                    this.RaisePropertyChanged("AppDomainMonitoringTotalAllocatedMemorySize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan AppDomainMonitoringTotalProcessorTime {
            get {
                return this.AppDomainMonitoringTotalProcessorTimeField;
            }
            set {
                if ((this.AppDomainMonitoringTotalProcessorTimeField.Equals(value) != true)) {
                    this.AppDomainMonitoringTotalProcessorTimeField = value;
                    this.RaisePropertyChanged("AppDomainMonitoringTotalProcessorTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ForemanId {
            get {
                return this.ForemanIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ForemanIdField, value) != true)) {
                    this.ForemanIdField = value;
                    this.RaisePropertyChanged("ForemanId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsError {
            get {
                return this.IsErrorField;
            }
            set {
                if ((this.IsErrorField.Equals(value) != true)) {
                    this.IsErrorField = value;
                    this.RaisePropertyChanged("IsError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkerNodeExceptionString {
            get {
                return this.WorkerNodeExceptionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkerNodeExceptionStringField, value) != true)) {
                    this.WorkerNodeExceptionStringField = value;
                    this.RaisePropertyChanged("WorkerNodeExceptionString");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.batch.com/agent/remote/contractor", ConfigurationName="BatchRemoteContractorNS.BatchRemoteContractor")]
    public interface BatchRemoteContractor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ImportFrom" +
            "ConfigString", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ImportFrom" +
            "ConfigStringResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ImportFrom" +
            "ConfigStringFaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        void ImportFromConfigString(string ConfigString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ImportFrom" +
            "ConfigString", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ImportFrom" +
            "ConfigStringResponse")]
        System.Threading.Tasks.Task ImportFromConfigStringAsync(string ConfigString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ExportToCo" +
            "nfigString", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ExportToCo" +
            "nfigStringResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ExportToCo" +
            "nfigStringFaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        string ExportToConfigString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ExportToCo" +
            "nfigString", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ExportToCo" +
            "nfigStringResponse")]
        System.Threading.Tasks.Task<string> ExportToConfigStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/AddForeman" +
            "", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/AddForeman" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/AddForeman" +
            "FaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        void AddForeman(string ForemanId, string ConfigString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/AddForeman" +
            "", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/AddForeman" +
            "Response")]
        System.Threading.Tasks.Task AddForemanAsync(string ForemanId, string ConfigString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/RemoveFore" +
            "man", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/RemoveFore" +
            "manResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/RemoveFore" +
            "manFaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        void RemoveForeman(string ForemanId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/RemoveFore" +
            "man", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/RemoveFore" +
            "manResponse")]
        System.Threading.Tasks.Task RemoveForemanAsync(string ForemanId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ConnectFor" +
            "eman", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ConnectFor" +
            "emanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ConnectFor" +
            "emanFaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        void ConnectForeman(string ForemanIdFrom, string ForemanIdTo, bool IsForce, bool IsTestForeman, int TestForemanRequestWeight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ConnectFor" +
            "eman", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/ConnectFor" +
            "emanResponse")]
        System.Threading.Tasks.Task ConnectForemanAsync(string ForemanIdFrom, string ForemanIdTo, bool IsForce, bool IsTestForeman, int TestForemanRequestWeight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/Disconnect" +
            "Foreman", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/Disconnect" +
            "ForemanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/Disconnect" +
            "ForemanFaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        void DisconnectForeman(string ForemanIdFrom, string ForemanIdTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/Disconnect" +
            "Foreman", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/Disconnect" +
            "ForemanResponse")]
        System.Threading.Tasks.Task DisconnectForemanAsync(string ForemanIdFrom, string ForemanIdTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/Run", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/RunRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/RunFaultDa" +
            "taFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BatchTest.BatchRemoteContractorNS.ForemanStats))]
        void Run(string ForemanId, object Data, bool IsFollowConnections, bool IsContinueOnError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/Run", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/RunRespons" +
            "e")]
        System.Threading.Tasks.Task RunAsync(string ForemanId, object Data, bool IsFollowConnections, bool IsContinueOnError);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/SubmitData" +
            "", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/SubmitData" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/SubmitData" +
            "FaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BatchTest.BatchRemoteContractorNS.ForemanStats))]
        bool SubmitData(string ForemanId, string QueueName, object Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/SubmitData" +
            "", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/SubmitData" +
            "Response")]
        System.Threading.Tasks.Task<bool> SubmitDataAsync(string ForemanId, string QueueName, object Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/CompleteAd" +
            "ding", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/CompleteAd" +
            "dingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/CompleteAd" +
            "dingFaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        bool CompleteAdding(string ForemanId, string QueueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/CompleteAd" +
            "ding", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/CompleteAd" +
            "dingResponse")]
        System.Threading.Tasks.Task<bool> CompleteAddingAsync(string ForemanId, string QueueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/GetRemoteF" +
            "oremanStats", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/GetRemoteF" +
            "oremanStatsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BatchTest.BatchRemoteContractorNS.FaultData), Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/GetRemoteF" +
            "oremanStatsFaultDataFault", Name="FaultData", Namespace="http://schemas.datacontract.org/2004/07/BatchAgent")]
        BatchTest.BatchRemoteContractorNS.ForemanStats GetRemoteForemanStats(string ForemanId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/GetRemoteF" +
            "oremanStats", ReplyAction="http://schemas.batch.com/agent/remote/contractor/BatchRemoteContractor/GetRemoteF" +
            "oremanStatsResponse")]
        System.Threading.Tasks.Task<BatchTest.BatchRemoteContractorNS.ForemanStats> GetRemoteForemanStatsAsync(string ForemanId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BatchRemoteContractorChannel : BatchTest.BatchRemoteContractorNS.BatchRemoteContractor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchRemoteContractorClient : System.ServiceModel.ClientBase<BatchTest.BatchRemoteContractorNS.BatchRemoteContractor>, BatchTest.BatchRemoteContractorNS.BatchRemoteContractor {
        
        public BatchRemoteContractorClient() {
        }
        
        public BatchRemoteContractorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BatchRemoteContractorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BatchRemoteContractorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BatchRemoteContractorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ImportFromConfigString(string ConfigString) {
            base.Channel.ImportFromConfigString(ConfigString);
        }
        
        public System.Threading.Tasks.Task ImportFromConfigStringAsync(string ConfigString) {
            return base.Channel.ImportFromConfigStringAsync(ConfigString);
        }
        
        public string ExportToConfigString() {
            return base.Channel.ExportToConfigString();
        }
        
        public System.Threading.Tasks.Task<string> ExportToConfigStringAsync() {
            return base.Channel.ExportToConfigStringAsync();
        }
        
        public void AddForeman(string ForemanId, string ConfigString) {
            base.Channel.AddForeman(ForemanId, ConfigString);
        }
        
        public System.Threading.Tasks.Task AddForemanAsync(string ForemanId, string ConfigString) {
            return base.Channel.AddForemanAsync(ForemanId, ConfigString);
        }
        
        public void RemoveForeman(string ForemanId) {
            base.Channel.RemoveForeman(ForemanId);
        }
        
        public System.Threading.Tasks.Task RemoveForemanAsync(string ForemanId) {
            return base.Channel.RemoveForemanAsync(ForemanId);
        }
        
        public void ConnectForeman(string ForemanIdFrom, string ForemanIdTo, bool IsForce, bool IsTestForeman, int TestForemanRequestWeight) {
            base.Channel.ConnectForeman(ForemanIdFrom, ForemanIdTo, IsForce, IsTestForeman, TestForemanRequestWeight);
        }
        
        public System.Threading.Tasks.Task ConnectForemanAsync(string ForemanIdFrom, string ForemanIdTo, bool IsForce, bool IsTestForeman, int TestForemanRequestWeight) {
            return base.Channel.ConnectForemanAsync(ForemanIdFrom, ForemanIdTo, IsForce, IsTestForeman, TestForemanRequestWeight);
        }
        
        public void DisconnectForeman(string ForemanIdFrom, string ForemanIdTo) {
            base.Channel.DisconnectForeman(ForemanIdFrom, ForemanIdTo);
        }
        
        public System.Threading.Tasks.Task DisconnectForemanAsync(string ForemanIdFrom, string ForemanIdTo) {
            return base.Channel.DisconnectForemanAsync(ForemanIdFrom, ForemanIdTo);
        }
        
        public void Run(string ForemanId, object Data, bool IsFollowConnections, bool IsContinueOnError) {
            base.Channel.Run(ForemanId, Data, IsFollowConnections, IsContinueOnError);
        }
        
        public System.Threading.Tasks.Task RunAsync(string ForemanId, object Data, bool IsFollowConnections, bool IsContinueOnError) {
            return base.Channel.RunAsync(ForemanId, Data, IsFollowConnections, IsContinueOnError);
        }
        
        public bool SubmitData(string ForemanId, string QueueName, object Data) {
            return base.Channel.SubmitData(ForemanId, QueueName, Data);
        }
        
        public System.Threading.Tasks.Task<bool> SubmitDataAsync(string ForemanId, string QueueName, object Data) {
            return base.Channel.SubmitDataAsync(ForemanId, QueueName, Data);
        }
        
        public bool CompleteAdding(string ForemanId, string QueueName) {
            return base.Channel.CompleteAdding(ForemanId, QueueName);
        }
        
        public System.Threading.Tasks.Task<bool> CompleteAddingAsync(string ForemanId, string QueueName) {
            return base.Channel.CompleteAddingAsync(ForemanId, QueueName);
        }
        
        public BatchTest.BatchRemoteContractorNS.ForemanStats GetRemoteForemanStats(string ForemanId) {
            return base.Channel.GetRemoteForemanStats(ForemanId);
        }
        
        public System.Threading.Tasks.Task<BatchTest.BatchRemoteContractorNS.ForemanStats> GetRemoteForemanStatsAsync(string ForemanId) {
            return base.Channel.GetRemoteForemanStatsAsync(ForemanId);
        }
    }
}
